{"version":3,"sources":["components/row/row.module.css","components/head/head.module.css","components/head/head.js","components/row/row.js","components/table/table.js","index.js","App.js","serviceWorker.js"],"names":["module","exports","Head","props","className","style","head","name","price","market","volume","Row","state","data","marketCapUsd","priceUsd","volumeUsd24Hr","color","usual","symbol","socket","WebSocket","this","id","onmessage","mes","updatePrice","onerror","err","console","log","getSymbol","JSON","parse","oldPrice","setState","conversionNum","changed","setTimeout","strNum","short","parseFloat","toFixed","indexPoint","indexOf","slice","img","document","createElement","src","toLowerCase","alt","logo","onload","React","Component","Table","touch","coins","map","i","key","App","handelTouch","bind","e","table","querySelector","classList","remove","add","onTouchStart","Boolean","window","location","hostname","match","DocumentTouch","fetch","then","res","json","ReactDOM","render","getElementById","catch","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.092f958f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"name\":\"row_name__1qpuh\",\"prise\":\"row_prise__2pXkg\",\"market\":\"row_market__34brS\",\"volume\":\"row_volume__3Rf3V\",\"img\":\"row_img__3J7HR\",\"usual\":\"row_usual__1Gs_6\",\"changed\":\"row_changed__1KUCD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"head\":\"head_head__3GSI_\",\"name\":\"head_name__1T_hN\",\"prise\":\"head_prise__3ey_Q\",\"market\":\"head_market__2FWTM\",\"volume\":\"head_volume__2Y7TW\"};","import React from 'react';\r\nimport style from './head.module.css'\r\nfunction Head (props){\r\n\treturn (\r\n\t\t<section className={style.head}>\r\n\t\t\t<table>\r\n\t\t\t\t<tr>\r\n\t\t\t\t\t<th className={style.name}>Имя</th>\r\n\t\t\t\t\t<th className={style.price}>Стоимость</th>\r\n\t\t\t\t\t<th className={style.market}>Рыночная капитализация</th>\r\n\t\t\t\t\t<th className={style.volume}>Суточный объем</th>\r\n\t\t\t\t</tr>\r\n\t\t\t</table>\r\n\t\t</section>\r\n\t\t)\r\n}\r\n\r\nexport default Head;","import React from 'react';\r\nimport style from './row.module.css';\r\n\r\nclass Row extends React.Component {\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tname: props.data.name,\r\n\t\t\tmarket: props.data.marketCapUsd,\r\n\t\t\tprice: props.data.priceUsd,\r\n\t\t\tvolume: props.data.volumeUsd24Hr,\r\n\t\t\tcolor: style.usual,\r\n\t\t\tsymbol: <div/>\r\n\t\t};\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\t\tlet socket = new WebSocket(`wss://ws.coincap.io/prices?assets=${this.props.data.id}`);\r\n\t\tsocket.onmessage = (mes)=>this.updatePrice(mes);\r\n\t\tsocket.onerror = (err)=>console.log(err);\r\n\t\tthis.getSymbol();\r\n\t}\r\n\r\n\tupdatePrice(mes){\r\n\t\tlet data = JSON.parse(mes.data);\r\n\t\tlet oldPrice = this.state.price;\r\n\t\tthis.setState({price:data[this.props.data.id]});\r\n\t\tif(this.conversionNum(oldPrice)!== this.conversionNum(this.state.price)){\r\n\t\t\tthis.setState({color:style.changed});\r\n\t\t\tsetTimeout(()=>this.setState({color:style.usual}), 200);\r\n\t\t}\r\n\t}\r\n\r\n\tconversionNum(strNum){\r\n\t\tlet short = parseFloat(strNum).toFixed(2);\r\n\t\tlet indexPoint = strNum.indexOf('.');\r\n\t\t\r\n\t\tif(indexPoint < 4){\r\n\t\t\treturn `${short}`;\r\n\t\t}\r\n\t\tif(indexPoint >= 4 && indexPoint < 7){\r\n\t\t\treturn `${short.slice(0, indexPoint-3)},${short.slice(indexPoint-3)}`\r\n\t\t}\r\n\t\tif(indexPoint >= 7 && indexPoint < 10){\r\n\t\t\treturn `${short.slice(0, indexPoint-6)}.${short.slice(indexPoint-6, indexPoint-4)}m`\r\n\t\t}\r\n\t\tif(indexPoint >= 10 && indexPoint < 13){\r\n\t\t\treturn `${short.slice(0, indexPoint-9)}.${short.slice(indexPoint-9, indexPoint-7)}b`\r\n\t\t}\r\n\t\treturn strNum;\r\n}\r\n\r\n\tgetSymbol(){\r\n\t\tlet img = document.createElement('img');\r\n\t\tlet src = `https://static.coincap.io/assets/icons/${this.props.data.symbol.toLowerCase()}@2x.png`;\r\n\t\timg.src = src;\r\n\t\tlet symbol = <img alt=\"logo\" src={src} className={style.img}/>;\r\n\t\tlet logo = <img alt=\"logo\" src=\"https://coincap.io/static/logo_mark.png\" className={style.img}/>;\r\n\t\timg.onload = ()=>{this.setState({symbol: symbol})};\r\n\t\timg.onerror = ()=>{this.setState({symbol: logo})};\r\n\t}\r\n\r\n\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<tr className={this.state.color}>\r\n\t\t\t\t<td className={style.name}>{this.state.symbol}{this.state.name}</td>\r\n\t\t\t\t<td className={style.price}>$ {this.conversionNum(this.state.price)}</td>\r\n\t\t\t\t<td className={style.market}>$ {this.conversionNum(this.state.market)}</td>\r\n\t\t\t\t<td className={style.volume}>$ {this.conversionNum(this.state.volume)}</td>\r\n\t\t\t</tr>\r\n\t\t\t\t);\r\n\t}\r\n\r\n}\r\n\r\nexport default Row;","import React from 'react';\r\nimport Row from '../row/row.js'\r\n\r\nfunction Table (props){\r\n\tlet coins = props.coins.data.map(i=> <Row data={i} key={i.id}/>);\r\n\r\n\treturn (\r\n\t\t<section className=\"mouse table\">\r\n\t\t\t<table>\r\n\t\t\t\t{coins}\r\n\t\t\t</table>\r\n\t\t</section>\r\n\t\t);\r\n}\r\n\r\nexport default Table;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nlet touch;\nif(('ontouchstart' in window) || window.DocumentTouch){\n\tconsole.log('this is a touch device');\n\ttouch = true\n}else{\n\tconsole.log('this is not a touch device');\n\ttouch = false\n}\n\n\tfetch('https://api.coincap.io/v2/assets/?limit=15')\n\t\t.then(res=>res.json())\n\t\t\t.then((mes)=>{\n\t\t\t\tReactDOM.render(<App coins={mes} touch={touch}/>, document.getElementById('root'));\n\t\t\t})\n\t\t\t\t.catch(err=>console.log(err));\n\n\n/*ReactDOM.render(<App coins={coins}/>, document.getElementById('root'));*/\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport './App.css';\nimport Head from './components/head/head.js'\nimport Table from './components/table/table.js'\n\n\n\nclass App extends React.Component {\n\tconstructor(props){\n\t\tsuper(props)\n\t\tthis.handelTouch = this.handelTouch.bind(this)\n\t}\n\n\thandelTouch(e){\n\t\tlet table = document.querySelector('.table');\n\t\ttable.classList.remove('mouse');\n\t\ttable.classList.add('touch');\n\t}\n\nrender() {\n\treturn (\n\t\t<article onTouchStart={this.props.touch? this.handelTouch : null} \n\t\tclassName={(this.props.touch?'':'notouch')+ \" coins\"} >\n\t\t\t<Head/>\n\t\t\t<Table coins={this.props.coins}/>\n\t\t</article>\n\t\t);\n}\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n"],"sourceRoot":""}